#!/usr/bin/env python
# -*- encoding: utf-8; py-indent-offset: 4 -*-

#
# (c) 2019 Heinlein Support GmbH
#          Robert Sander <r.sander@heinlein-support.de>
#

# This is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  This file is distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

import argparse
import requests
import urllib
import cPickle
import base64
import re
import pprint

def debug_output(var):
    if params['debug']:
        pprint.pprint(var)

class JenkinsAPI(requests.Session):
    def get_build_artifacts(self, build):
        c = {}
        for a in build['artifacts']:
            resp = self.get("%s/artifact/%s" % (build['url'], a['relativePath']))
            if resp.status_code == 200:
                c[a['fileName']] = resp.text
        return c
    
    def get_build_data(self, url):
        print(url)

        resp = self.get(url)
        a = None

        if resp.status_code == 200:
            build = resp.json()

            pprint.pprint(build)

            a = self.get_build_artifacts(build)
        return a
            
    def get_job_data(self, url):
        resp = self.get(url)

        if resp.status_code == 200:
            job = resp.json()

            return job

            pprint.pprint(job)

            buildname = job['name']
            lastUnsuccessfulBuild = job.get('lastUnsuccessfulBuild', {'number': 0}).get('number', 0)
            lastStableBuild = job.get('lastStableBuild', {'number': 0}).get('number', 0)
            numFailedBuilds = 0
            if lastUnsuccessfulBuild > 0:
                numFailedBuilds = lastUnsuccessfulBuild - lastStableBuild
            if numFailedBuilds < 0:
                numFailedBuilds = 0

            d = None
            if job['lastCompletedBuild']['number'] == job['lastSuccessfulBuild']['number']:
                d = self.get_build_data(job['lastCompletedBuild']['url'] + 'api/json')
            
            return {'failed': numFailedBuilds, 'build': d}
        return None

    def get_jobs(self, hostname, servicespecs):
        jobres = {}
        for host in servicespecs['hosts']:
            for job in host['jobs']:
                jobres[re.compile(job)] = host['hostname']

        pprint.pprint(jobres)

        resp = self.get(servicespecs['url'] + '/api/json')
        if resp.status_code == 200:
            data = resp.json()

            if 'jobs' in data:
                for job in data['jobs']:
                    for jobre, host in jobres.iteritems():
                        if jobre.match(job['name']):
                            if host and hostname != host:
                                print '<<<<%s>>>>' % host
                            print '<<<jenkinsjobs>>>'
                            job[u'data'] = self.get_job_data(job['url'] + '/api/json')
                            pprint.pprint(job)
                            if host and hostname != host:
                                print '<<<<>>>>'

if __name__ == '__main__':

    parser = argparse.ArgumentParser()
    parser.add_argument('-u', '--username')
    parser.add_argument('-p', '--password')
    parser.add_argument('params', nargs='+', help='base64 encoded cPickled Python dictionary')
    args = parser.parse_args()

    pprint.pprint(args)
    
    # Parameters are base64 encoded cPickle data
    params = cPickle.loads(base64.decodestring('\n'.join(args.params)))

    pprint.pprint(params)

            
    s = JenkinsAPI()

    if args.username and args.password:
        s.auth = (args.username, args.password)

    s.get_jobs(params['hostname'], params['servicespecs'])

