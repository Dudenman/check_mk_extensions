#!/usr/bin/env python
# -*- encoding: utf-8; py-indent-offset: 4 -*-

# (c) Robert Sander <r.sander@heinlein-support.de>

# This is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

factory_settings["apcaccess_status_default"] = {
    "voltage"         : (210, 190, 240, 260),
    "output_load"     : (80, 90),
    "battery_capacity": (90, 80),
    "timeleft"        : (10, 5),
}

def parse_apcaccess(info):
    parsed = {}
    instance = False
    for line in info:
        if line[0].startswith("[["):
            instance = line[0][2:-2]
            parsed[instance] = {}
        elif instance:
            parsed[instance][line[0].strip()] = ":".join(line[1:]).strip()
    return parsed

def inventory_apcaccess(parsed):
    for instance in parsed:
        yield instance, {}

def check_apcaccess(item, params, parsed):
    if item in parsed:
        data = parsed[item]
        if 'UPSNAME' in data and 'MODEL' in data and 'SERIALNO' in data and 'FIRMWARE' in data:
            yield 0, ", ".join([data['UPSNAME'], data.get('MODEL'), data.get('SERIALNO'), data.get('FIRMWARE')])
        else:
            yield 3, 'Unkown UPS / no data'
        metrics = { 'voltage': ('OUTPUTV', 'Output Voltage'),
                    'output_load': ('LOADPCT', 'Output Load'),
                    'battery_capacity': ('BCHARGE', 'Battery Capacity'),
                    'timeleft': ('TIMELEFT', 'Time Left') }
        human_readable = {'voltage': lambda x: "%0.0fV" % x,
                          'output_load': get_percent_human_readable,
                          'battery_capacity': get_percent_human_readable,
                          'timeleft': get_age_human_readable }
        factors = { 'timeleft': 60.0 }
        for metric, (key, text) in metrics.iteritems():
            if key in data:
                value = savefloat(data.get(key).split(' ')[0]) * factors.get(metric, 1.0)
                if metric in params:
                    if len(params[metric]) == 2:
                        warn, crit = map(lambda x: x * factors.get(metric, 1.0), params[metric])
                        msg = "%s: %s (%s, %s)" % (text,
                                                   human_readable[metric](value),
                                                   human_readable[metric](warn),
                                                   human_readable[metric](crit))
                        perfdata = [(metric, value, warn, crit)]
                        if warn < crit:
                            if value > crit:
                                yield 2, msg, perfdata
                            elif value > warn:
                                yield 1, msg, perfdata
                            else:
                                yield 0, msg, perfdata
                        else:
                            if value < crit:
                                yield 2, msg, perfdata
                            elif value < warn:
                                yield 1, msg, perfdata
                            else:
                                yield 0, msg, perfdata
                    elif len(params[metric]) == 4:
                        low_warn, low_crit, warn, crit = map(lambda x: x * factors.get(metric, 1.0), params[metric])
                        msg = "%s: %s (lower: %s, %s; upper: %s, %s)" % (text,
                                                                         human_readable[metric](value),
                                                                         human_readable[metric](low_crit),
                                                                         human_readable[metric](low_warn),
                                                                         human_readable[metric](warn),
                                                                         human_readable[metric](crit))
                        if value < low_crit:
                            yield 2, msg, [(metric, value, low_warn, low_crit)]
                        elif value > crit:
                            yield 2, msg, [(metric, value, warn, crit)]
                        elif value < low_warn:
                            yield 1, msg, [(metric, value, low_warn, low_crit)]
                        elif value > warn:
                            yield 1, msg, [(metric, value, warn, crit)]
                        else:
                            yield 0, msg, [(metric, value, warn, crit)]
                else:
                    yield 0, "%s: %s" % (text, human_readable[metric](value)), [(metric, value)]
        if data.get('STATUS') != 'ONLINE' and data.get('SELFTEST') == 'NO':
            yield 2, 'Status is ' + data.get('STATUS')

check_info["apcaccess"] = {
    "parse_function"          : parse_apcaccess,
    "check_function"          : check_apcaccess,
    "inventory_function"      : inventory_apcaccess,
    "service_description"     : "APC %s Status",
    "has_perfdata"            : True,
    "default_levels_variable" : "apcaccess_status_default",
    "group"                   : 'apcaccess',
}

factory_settings["apcaccess_temp_default"] = {
    "levels"    : (40, 50),
}

def inventory_apcaccess_temp(parsed):
    for instance in parsed:
        if 'ITEMP' in parsed[instance]:
            yield instance, {}

def check_apcaccess_temp(item, params, parsed):
    if item in parsed and 'ITEMP' in parsed[item]:
        return check_temperature(savefloat(parsed[item].get('ITEMP').split(' ')[0]),
                                 params,
                                 'apcaccess_temp.%s' % item,
                                 dev_unit=parsed[item].get('ITEMP').split(' ')[1].lower())

check_info["apcaccess.temperature"] = {
    "check_function"         : check_apcaccess_temp,
    "inventory_function"     : inventory_apcaccess_temp,
    "service_description"    : "APC %s Temperature",
    "has_perfdata"           : True,
    "default_levels_variable": "apcaccess_temp_default",
    "group"                  : "temperature",
    "includes"               : [ "temperature.include" ],
}
