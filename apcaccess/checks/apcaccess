#!/usr/bin/env python
# -*- encoding: utf-8; py-indent-offset: 4 -*-

# (c) Robert Sander <r.sander@heinlein-support.de>

# This is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

factory_settings["apcaccess_status_default"] = {
    "voltage"         : (210, 190, 240, 260),
    "output_load"     : (80, 90),
    "battery_capacity": (90, 80),
    "timeleft"        : (10, 5),
}

def parse_apcaccess(info):
    parsed = {}
    instance = False
    for line in info:
        if line[0].startswith("[["):
            instance = line[0][2:-2]
            parsed[instance] = {}
        elif instance:
            parsed[instance][line[0].strip()] = ":".join(line[1:]).strip()
    return parsed

def inventory_apcaccess(parsed):
    for instance in parsed:
        yield instance, {}

def check_apcaccess(item, params, parsed):
    if item in parsed:
        data = parsed[item]
        perfdata = []
        metrics = { 'voltage': ('OUTPUTV', 'Output Voltage'),
                    'output_load': ('LOADPCT', 'Output Load'),
                    'battery_capacity': ('BCHARGE', 'Battery Capacity'),
                    'timeleft': ('TIMELEFT', 'Time Left') }
        factors = { 'timeleft': 60.0 }
        status = {}
        for metric, (key, text) in metrics.iteritems():
            if key in data:
                status[metric] = 0
                data[metric] = savefloat(data.get(key).split(' ')[0]) * factors.get(metric, 1.0)
                if metric in params:
                    if len(params[metric]) == 2:
                        warn, crit = map(lambda x: x * factors.get(metric, 1.0), params[metric])
                        if warn < crit:
                            if data[metric] > crit:
                                status[metric] = 2
                            elif data[metric] > warn:
                                status[metric] = 1
                        else:
                            if data[metric] < crit:
                                status[metric] = 2
                            elif data[metric] < warn:
                                status[metric] = 1
                    elif len(params[metric]) == 4:
                        low_warn, low_crit, warn, crit = map(lambda x: x * factors.get(metric, 1.0), params[metric])
                        if data[metric] < low_crit or data[metric] > crit:
                            status[metric] = 2
                        elif data[metric] < low_warn or data[metric] > warn:
                            status[metric] = 1
                    perfdata.append((metric, data[metric], warn, crit))
                else:
                    perfdata.append((metric, data[metric]))
        yield 0, ", ".join([data.get('UPSNAME'), data.get('MODEL'), data.get('SERIALNO'), data.get('FIRMWARE')]), perfdata
        if data.get('STATUS') != 'ONLINE' and data.get('SELFTEST') == 'NO':
            yield 2, 'Status is ' + data.get('STATUS')
        for metric, s in status.iteritems():
            if s > 0:
                yield s, '%s is outside limits' % metrics[metric][1]

check_info["apcaccess"] = {
    "parse_function"          : parse_apcaccess,
    "check_function"          : check_apcaccess,
    "inventory_function"      : inventory_apcaccess,
    "service_description"     : "APC %s Status",
    "has_perfdata"            : True,
    "default_levels_variable" : "apcaccess_status_default",
    "group"                   : 'apcaccess',
}

factory_settings["apcaccess_temp_default"] = {
    "levels"    : (40, 50),
}

def inventory_apcaccess_temp(parsed):
    for instance in parsed:
        yield instance, {}    

def check_apcaccess_temp(item, params, parsed):
    if item in parsed and 'ITEMP' in parsed[item]:
        return check_temperature(savefloat(parsed[item].get('ITEMP').split(' ')[0]),
                                 params,
                                 'apcaccess_temp.%s' % item,
                                 dev_unit=parsed[item].get('ITEMP').split(' ')[1].lower())

check_info["apcaccess.temperature"] = {
    "check_function"         : check_apcaccess_temp,
    "inventory_function"     : inventory_apcaccess_temp,
    "service_description"    : "APC %s Temperature",
    "has_perfdata"           : True,
    "default_levels_variable": "apcaccess_temp_default",
    "group"                  : "temperature",
    "includes"               : [ "temperature.include" ],
}
