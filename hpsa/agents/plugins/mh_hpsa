#!/bin/bash

# check_mk check f. HP Smart Array Controller
#
# 01/2011 Matthias Henze
# Lizenz: GPL v2

#
# https://github.com/gebi/checkmk-agent-hp
#

# sample output - requires hpacucli
#
#
# hpacucli controller all show 
#
#Smart Array P410 in Slot 4                (sn: PACCR9SY0AXY  )
#
#
# hpacucli controller slot=4 array all show 
#
#Smart Array P410 in Slot 4
#
#   array A (SATA, Unused Space: 0 MB)
#
#
# hpacucli controller slot=4 array A physicaldrive all show
#
#Smart Array P410 in Slot 4
#
#   array A
#
#      physicaldrive 1I:1:1 (port 1I:box 1:bay 1, SATA, 500 GB, OK)
#      physicaldrive 1I:1:2 (port 1I:box 1:bay 2, SATA, 500 GB, OK)
#      physicaldrive 1I:1:3 (port 1I:box 1:bay 3, SATA, 500 GB, OK)
#      physicaldrive 1I:1:4 (port 1I:box 1:bay 4, SATA, 500 GB, OK, spare)
#

# Do not check FC LUNs, speeds up processing
export INFOMGR_BYPASS_NONSA=1

RAID_CHECK_TOOL=hpacucli
if [ -x /usr/sbin/hpssacli ]; then
	RAID_CHECK_TOOL=hpssacli
elif [ -x /usr/sbin/ssacli ]; then
	RAID_CHECK_TOOL=ssacli
fi


function is_integer() {
    [ "$1" -eq "$1" ] > /dev/null 2>&1
    return $?
}

if [ -e  /proc/driver/cciss -o  -e /sys/bus/cciss -o -e /sys/bus/pci/drivers/hpsa ]; then

  echo '<<<hpsa_controller>>>'
  cc=-1
  CMD="$RAID_CHECK_TOOL controller all show"
  while read -a cont; do
    if is_integer ${cont[5]}; then
      cc=$(($cc+1))
      read -a cstat <<< $($RAID_CHECK_TOOL controller slot=${cont[5]} show | grep "Controller Status")
      if [ "${cstat[2]}" = "OK" ]; then
        echo "${cont[5]} OK ${cont[2]}"
      else
        echo "${cont[5]} CRIT ${cont[2]}"
      fi
      controllers[$cc]=${cont[5]}
    fi
  done < <( $CMD )

  echo '<<<hpsa_array>>>'
  for c in $(seq 0 $cc)
  do
    ac=-1
    CMD="$RAID_CHECK_TOOL controller slot=${controllers[$c]} array all show"
    while read -a cary; do
      if [ "X${cary[0]}X" = "XarrayX" -o "X${cary[0]}X" = "XArrayX" ]; then
        ac=$(($ac+1))
        # collect lines
        read -d + -a x <<< $($RAID_CHECK_TOOL controller slot=${controllers[$c]} array ${cary[1]} show | sed 's/(Embedded)//')
        # collect words
        read -a ary <<< ${x[*]}
        if [[ "$RAID_CHECK_TOOL" = "hpacucli" ]]; then
          echo "${controllers[$c]}:${cary[1]} ${ary[16]} ${ary[10]} ${ary[13]} ${ary[14]}"
        elif [[ "$RAID_CHECK_TOOL" = "hpssacli" ]]; then
          echo "${controllers[$c]}:${cary[1]} ${ary[22]} ${ary[10]} ${ary[13]} ${ary[14]}"
        else
          echo "${controllers[$c]}:${cary[1]} ${ary[24]} ${ary[10]} ${ary[15]} ${ary[16]}"
        fi
        arrays[$ac]=${cary[1]}
      fi
    done < <( $CMD )
  done

  echo '<<<hpsa_drive>>>'
  for c in $(seq 0 $cc)
  do
    for a in $(seq 0 $ac)
    do
      CMD="$RAID_CHECK_TOOL controller slot=${controllers[$c]} array ${arrays[$a]} physicaldrive all show"
      while read -a pdrv; do
        if [ "X${pdrv[0]}X" = "XphysicaldriveX" ]; then
          if [ "X${pdrv[7]}X" = "XHDD,X" ] || [ "X${pdrv[7]}X" = "XSSD,X" ]; then
            echo -n "${controllers[$c]}:${arrays[$a]}:${pdrv[1]} ${pdrv[10]/[),]/} ${pdrv[6]/,/} ${pdrv[8]} ${pdrv[9]/,/} "
            if [ ${pdrv[11]} ]; then
              echo ${pdrv[11]/)/}
            else
              echo "assigned"
            fi
          else
            echo -n "${controllers[$c]}:${arrays[$a]}:${pdrv[1]} ${pdrv[9]/[),]/} ${pdrv[6]/,/} ${pdrv[7]} ${pdrv[8]/,/} "
            if [ ${pdrv[10]} ]; then
              echo ${pdrv[10]/)/}
            else
              echo "assigned"
            fi
          fi
        fi
      done < <( $CMD )
    done
  done
fi
