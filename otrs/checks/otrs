#!/usr/bin/env python
# -*- encoding: utf-8; py-indent-offset: 4 -*-

# (c) 2015 Heinlein Support GmbH
#          Robert Sander <r.sander@heinlein-support.de>

# This is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  This file is distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

factory_settings['otrs_default_levels'] = {
    'levels': [ (['new'], ( 50, 100 )) ],
}

def otrs_name(line):
    return "%s %02d" % (line[0], saveint(line[1]))

def otrs_data(info):
    otrs = {}
    for line in info:
        if not otrs.has_key(line[0]):
            otrs[line[0]] = {}
        otrs[line[0]][saveint(line[1])] = {'total': saveint(line[2]), 'state': " ".join(line[3:])}
    return otrs

def inventory_otrs(info):
    inventory = []
    otrs = otrs_data(info)
    for queue in otrs.keys():
        inventory.append( ( queue, None ) )
    return inventory

def check_otrs(item, params, info):
    otrs = otrs_data(info)

    paramstate = {}
    if type(params) == dict:
        if 'levels' in params:
            for listofstates, levels in params['levels']:
                for state in listofstates:
                    paramstate[state] = levels
                    
    for queue in otrs.keys():
        if item == queue:
            perfdata = []
            msgtxt = []
            rc = 0
            for ticket_state in otrs[queue].keys():
                total = otrs[queue][ticket_state]['total']
                state = otrs[queue][ticket_state]['state']
                dsname = state.replace(' ', '_').replace(',', '_').replace('.', '_')
                has_no_param = False
                if state in paramstate:
                    if type(paramstate[state]) == tuple:
                        perfdata.append((dsname, total, paramstate[state][0], paramstate[state][1]))
                    else:
                        perfdata.append((dsname, total))
                    if paramstate[state]:
                        res, text, perf = check_levels(total, dsname, paramstate[state], unit='tickets')
                        if res > rc:
                            rc = res
                        msgtxt.append('%d %s%s%s' % (total, state, state_markers[res], text))
                        perfdata += perf
                    else:
                        msgtxt.append('%d %s' % (total, state))
                else:
                    msgtxt.append('%d %s' % (total, state))
                    perfdata.append((dsname, total))
            return (rc, "; ".join(msgtxt), perfdata)
    return (3, "Queue %s not found" % item, [])

check_info['otrs'] = {
    'check_function':      check_otrs,
    'service_description': "OTRS %s",
    'has_perfdata':        True,
    'inventory_function':  inventory_otrs,
    'group':               'otrs',
    'default_levels_variable'  : "otrs_default_levels",
}
