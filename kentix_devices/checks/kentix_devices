#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-

# (c) 2018 Heinlein Support GmbH
#          Robert Sander <r.sander@heinlein-support.de>

# This is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


def parse_kentix_devices(info):
    parsed = {'multiplier': map(lambda x: savefloat(x[0]), info[0]),
              'sensors': {},
              'zones': {} }
    meta = { 3: 'temp',
             4: 'humidity',
             5: 'dewpoint',
             6: 'co',
             7: 'motion',
             8: 'vibration',
             # 9: 'latency'
           }
    armed = { '0': False,
              '1': True,
            }
    for line in info[1]:
        parsed['zones'][line[0]] = {'name': line[1], 'armed': armed.get(line[2], False)}
    for line in info[2]:
        sid = line[0]
        sensor = { 'info': line }
        sensor['type'] = line[2]
        sensor['zone'] = line[6]
        for key, val in meta.iteritems():
            for subline in info[key]:
                if subline[0] == sid:
                    sensor[val] = subline
        parsed['sensors']["%s %s" % (line[1], sid)] = sensor
    return parsed

def inventory_kentix_devices(parsed, params, sfunc):
    for sensoritem, sensordata in parsed['sensors'].iteritems():
        if sfunc in sensordata:
            yield sensoritem, params

#   .--temperature---------------------------------------------------------.
#   |      _                                      _                        |
#   |     | |_ ___ _ __ ___  _ __   ___ _ __ __ _| |_ _   _ _ __ ___       |
#   |     | __/ _ \ '_ ` _ \| '_ \ / _ \ '__/ _` | __| | | | '__/ _ \      |
#   |     | ||  __/ | | | | | |_) |  __/ | | (_| | |_| |_| | | |  __/      |
#   |      \__\___|_| |_| |_| .__/ \___|_|  \__,_|\__|\__,_|_|  \___|      |
#   |                       |_|                                            |
#   +----------------------------------------------------------------------+
#   |                            main check                                |
#   '----------------------------------------------------------------------'

def check_kentix_devices_temperature(item, params, parsed):
    if item in parsed['sensors']:
        sensordata = parsed['sensors'][item]
        tempMin = savefloat(sensordata['temp'][2])
        tempMax = savefloat(sensordata['temp'][3])
        alarm = sensordata['temp'][4]
        dev_status = 0
        if alarm == '1':
            dev_status = 2
        if alarm == '2':
            dev_status = 1
        state, text, perfdata = check_temperature(savefloat(sensordata['temp'][1]) / parsed['multiplier'][0],
                                                  params,
                                                  "kentix_devices_%s" % item,
                                                  dev_levels=(tempMax, tempMax),
                                                  dev_levels_lower=(tempMin, tempMin),
                                                  dev_status=dev_status,
        )
        zone = ""
        if sensordata['zone'] in parsed['zones']:
            zone = " in zone %s" % parsed['zones'][sensordata['zone']]['name']
        return state, "%s%s" % (text, zone), perfdata

check_info['kentix_devices'] = {
    'parse_function'            : parse_kentix_devices,
    'inventory_function'        : lambda parsed: inventory_kentix_devices(parsed, {}, 'temp'),
    'check_function'            : check_kentix_devices_temperature,
    'service_description'       : 'Temperature %s',
    'has_perfdata'              : True,
    'group'                     : 'temperature',
    'snmp_info'                 : [
        ( ".1.3.6.1.4.1.37954.5.1.1", [ "" ] ),
        ( ".1.3.6.1.4.1.37954.5.3.1.1", [ "1",      # zoneIndex
                                          "2",      # zoneName
                                          "3",      # zoneArmedState
        ] ),
        ( ".1.3.6.1.4.1.37954.5.2.1.1", [ "1",      # generalIndex
                                          "2",      # sensorName
                                          "3",      # sensorType
                                          "4",      # sensorVersion
                                          "5",      # sensorAddress
                                          "6",      # sensorPort
                                          "7",      # sensorZone
                                          "8",      # sensorCommunication
                                          "9",      # sensorBatteryLevel (only used for battery sensors)
        ] ),
        ( ".1.3.6.1.4.1.37954.5.2.2.1", [ "1",      # temperatureIndex
                                          "2",      # tempValue
                                          "4",      # tempMin
                                          "5",      # tempMax
                                          "3",      # tempAlarm
        ] ),
        ( ".1.3.6.1.4.1.37954.5.2.3.1", [ "1",      # humidityIndex
                                          "2",      # humValue
                                          "5",      # humMax
                                          "3",      # humAlarm
        ] ),
        ( ".1.3.6.1.4.1.37954.5.2.4.1", [ "1",      # dewpointIndex
                                          "2",      # dewValue
                                          "5",      # dewMax
                                          "3",      # dewAlarm
        ] ),
        ( ".1.3.6.1.4.1.37954.5.2.5.1", [ "1",      # coIndex
                                          "2",      # coValue
                                          "5",      # coMax
                                          "3",      # coAlarm
        ] ),
        ( ".1.3.6.1.4.1.37954.5.2.6.1", [ "1",      # motionIndex
                                          "2",      # motValue
                                          "5",      # motMax
                                          "3",      # motAlarm
        ] ),
        ( ".1.3.6.1.4.1.37954.5.2.7.1", [ "1",      # vibrationIndex
                                          "2",      # vibValue
                                          "5",      # vibMax
                                          "3",      # vibAlarm
        ] ),
#        ( ".1.3.6.1.4.1.37954.5.2.8.1", [ "1",      # latencyIndex
#                                      "2",      # latValue
#                                      # "3",      # latAlarm
#                                      "5",      # latMax
#                                    ] ),
        ],
    'snmp_scan_function'        : lambda oid: oid(".1.3.6.1.2.1.1.2.0") == ".1.3.6.1.4.1.37954.5",
    'includes'                  : [ "temperature.include" ],
}

#.
#   .--humidity------------------------------------------------------------.
#   |              _                     _     _ _ _                       |
#   |             | |__  _   _ _ __ ___ (_) __| (_) |_ _   _               |
#   |             | '_ \| | | | '_ ` _ \| |/ _` | | __| | | |              |
#   |             | | | | |_| | | | | | | | (_| | | |_| |_| |              |
#   |             |_| |_|\__,_|_| |_| |_|_|\__,_|_|\__|\__, |              |
#   |                                                  |___/               |
#   +----------------------------------------------------------------------+


def check_kentix_devices_humidity(item, params, parsed):
    if item in parsed['sensors']:
        sensordata = parsed['sensors'][item]
        alarm = sensordata['humidity'][3]
        dev_status = 0
        if alarm == '1':
            dev_status = 2
        if alarm == '2':
            dev_status = 1
        if not params:
            params = { 'levels': ( savefloat(sensordata['humidity'][2]), 101 ) }
        state, text, perfdata = check_humidity(savefloat(sensordata['humidity'][1]) / parsed['multiplier'][1], params)
        zone = ""
        if sensordata['zone'] in parsed['zones']:
            zone = " in zone %s" % parsed['zones'][sensordata['zone']]['name']
        return max(state, dev_status), "%s%s" % (text, zone), perfdata

check_info['kentix_devices.humidity'] = {
    'inventory_function'        : lambda parsed: inventory_kentix_devices(parsed, {}, 'humidity'),
    'check_function'            : check_kentix_devices_humidity,
    'service_description'       : 'Humidity %s',
    'has_perfdata'              : True,
    'group'                     : 'humidity',
    'includes'                  : [ "humidity.include" ],
}

#   .--Dew Point-----------------------------------------------------------.
#   |            ____                  ____       _       _                |
#   |           |  _ \  _____      __ |  _ \ ___ (_)_ __ | |_              |
#   |           | | | |/ _ \ \ /\ / / | |_) / _ \| | '_ \| __|             |
#   |           | |_| |  __/\ V  V /  |  __/ (_) | | | | | |_              |
#   |           |____/ \___| \_/\_/   |_|   \___/|_|_| |_|\__|             |
#   |                                                                      |
#   +----------------------------------------------------------------------+
#   |                                                                      |
#   '----------------------------------------------------------------------'
#.

def check_kentix_devices_dewpoint(item, params, parsed):
    if item in parsed['sensors']:
        sensordata = parsed['sensors'][item]
        dewValue = savefloat(sensordata['dewpoint'][1]) / parsed['multiplier'][2]
        dewMax = savefloat(sensordata['dewpoint'][2])
        alarm = sensordata['dewpoint'][3]
        dev_status = 0
        if alarm == '1':
            dev_status = 2
        if alarm == '2':
            dev_status = 1
        if 'temp' in sensordata:
            tempValue = savefloat(sensordata['temp'][1]) / parsed['multiplier'][0]
            state, text, perfdata = check_temperature(dewValue,
                                                      params,
                                                      "kentix_devices_dewpoint_%s" % item,
                                                      dev_levels=(tempValue - dewMax, tempValue - dewMax),
                                                      dev_status=dev_status,
            )
        else:
            state, text, perfdata = check_temperature(dewValue,
                                                      params,
                                                      "kentix_devices_dewpoint_%s" % item,
                                                      dev_status=dev_status,
            )
        zone = ""
        if sensordata['zone'] in parsed['zones']:
            zone = " in zone %s" % parsed['zones'][sensordata['zone']]['name']
        return state, "%s%s" % (text, zone), perfdata

check_info['kentix_devices.dewpoint'] = {
    'inventory_function'        : lambda parsed: inventory_kentix_devices(parsed, {}, 'dewpoint'),
    'check_function'            : check_kentix_devices_dewpoint,
    'service_description'       : 'Dewpoint %s',
    'has_perfdata'              : True,
    'group'                     : 'temperature',
    'includes'                  : [ 'temperature.include' ],
}

#.
#   .--CO - carbon monoxide------------------------------------------------.
#   |         ____ ___                           _                         |
#   |        / ___/ _ \            ___ __ _ _ __| |__   ___  _ __          |
#   |       | |  | | | |  _____   / __/ _` | '__| '_ \ / _ \| '_ \         |
#   |       | |__| |_| | |_____| | (_| (_| | |  | |_) | (_) | | | |        |
#   |        \____\___/           \___\__,_|_|  |_.__/ \___/|_| |_|        |
#   |                                                                      |
#   |                                            _     _                   |
#   |            _ __ ___   ___  _ __   _____  _(_) __| | ___              |
#   |           | '_ ` _ \ / _ \| '_ \ / _ \ \/ / |/ _` |/ _ \             |
#   |           | | | | | | (_) | | | | (_) >  <| | (_| |  __/             |
#   |           |_| |_| |_|\___/|_| |_|\___/_/\_\_|\__,_|\___|             |
#   |                                                                      |
#   +----------------------------------------------------------------------+
#   |                                                                      |
#   '----------------------------------------------------------------------'


def check_kentix_devices_co(item, params, parsed):
    if item in parsed['sensors']:
        sensordata = parsed['sensors'][item]
        coValue = saveint(sensordata['co'][1])
        coMax = saveint(sensordata['co'][2])
        alarm = sensordata['co'][3]
        dev_status = 0
        if alarm == '1':
            dev_status = 2
        if alarm == '2':
            dev_status = 1
        state = 0
        if coValue > coMax:
            state = 2
        zone = ""
        if sensordata['zone'] in parsed['zones']:
            zone = " in zone %s" % parsed['zones'][sensordata['zone']]['name']
        return max(state, dev_status), "%d ppm%s" % (coValue, zone), [ ( 'parts_per_million', coValue, 0, coMax ) ]

check_info['kentix_devices.co'] = {
    'inventory_function'        : lambda parsed: inventory_kentix_devices(parsed, {}, 'co'),
    'check_function'            : check_kentix_devices_co,
    'service_description'       : 'CO %s',
    'has_perfdata'              : True,
}

#.
#   .--motion--------------------------------------------------------------.
#   |                                  _   _                               |
#   |                  _ __ ___   ___ | |_(_) ___  _ __                    |
#   |                 | '_ ` _ \ / _ \| __| |/ _ \| '_ \                   |
#   |                 | | | | | | (_) | |_| | (_) | | | |                  |
#   |                 |_| |_| |_|\___/ \__|_|\___/|_| |_|                  |
#   |                                                                      |
#   +----------------------------------------------------------------------+
#   |                                                                      |
#   '----------------------------------------------------------------------'


def check_kentix_devices_motion(item, params, parsed):
    def test_in_period(time, periods):
        time_mins = time[0] * 60 + time[1]
        for per in periods:
            per_mins_low  = per[0][0] * 60 + per[0][1]
            per_mins_high = per[1][0] * 60 + per[1][1]
            if time_mins >= per_mins_low and time_mins < per_mins_high:
                return True
        return False

    if item in parsed['sensors']:
        sensordata = parsed['sensors'][item]
        motionValue = saveint(sensordata['motion'][1])
        motionMax = saveint(sensordata['motion'][2])
        alarm = sensordata['motion'][3]
        dev_status = 0
        if alarm == '1':
            dev_status = 2
        if alarm == '2':
            dev_status = 1

        weekdays = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']
        today = time.localtime()
        if params != None and 'time_periods' in params:
            periods = params['time_periods'][weekdays[today.tm_wday]]
        else:
            periods = [((0, 0), (24, 0))]

        zone = ""
        zoneArmed = True
        if sensordata['zone'] in parsed['zones']:
            zone = " in zone %s" % parsed['zones'][sensordata['zone']]['name']
            zoneArmed = parsed['zones'][sensordata['zone']]['armed']
        if motionValue >= motionMax:
            state = 0
            if zoneArmed:
                state = test_in_period((today.tm_hour, today.tm_min), periods) and 1 or 0
            return max(state, dev_status), 'Motion detected%s' % zone, [('motion', motionValue, motionMax, None, 0, 100)]
        else:
            return dev_status, "No motion%s detected" % zone, [('motion', motionValue, motionMax, None, 0, 100)]

check_info['kentix_devices.motion'] = {
    'inventory_function'        : lambda parsed: inventory_kentix_devices(parsed, {}, 'motion'),
    'check_function'            : check_kentix_devices_motion,
    'service_description'       : 'Motion %s',
    'has_perfdata'              : True,
    'group'                     : 'motion',
}

#.
#   .--vibration-----------------------------------------------------------.
#   |                    _ _               _   _                           |
#   |             __   _(_) |__  _ __ __ _| |_(_) ___  _ __                |
#   |             \ \ / / | '_ \| '__/ _` | __| |/ _ \| '_ \               |
#   |              \ V /| | |_) | | | (_| | |_| | (_) | | | |              |
#   |               \_/ |_|_.__/|_|  \__,_|\__|_|\___/|_| |_|              |
#   |                                                                      |
#   +----------------------------------------------------------------------+
#   |                                                                      |
#   '----------------------------------------------------------------------'


def check_kentix_devices_vibration(item, params, parsed):
    if item in parsed['sensors']:
        sensordata = parsed['sensors'][item]
        vibrationValue = saveint(sensordata['vibration'][1])
        vibrationMax = saveint(sensordata['vibration'][2])
        alarm = sensordata['vibration'][3]
        dev_status = 0
        if alarm == '1':
            dev_status = 2
        if alarm == '2':
            dev_status = 1
        state = 0
        if vibrationValue > vibrationMax:
            state = 2
        zone = ""
        if sensordata['zone'] in parsed['zones']:
            zone = " in zone %s" % parsed['zones'][sensordata['zone']]['name']
        return max(state, dev_status), "%d%s" % (vibrationValue, zone), [ ( 'vibration', vibrationValue, 0, vibrationMax ) ]

check_info['kentix_devices.vibration'] = {
    'inventory_function'        : lambda parsed: inventory_kentix_devices(parsed, {}, 'vibration'),
    'check_function'            : check_kentix_devices_vibration,
    'service_description'       : 'Vibration %s',
    'has_perfdata'              : True,
}

#.
#   .--zones---------------------------------------------------------------.
#   |                                                                      |
#   |                      _______  _ __   ___  ___                        |
#   |                     |_  / _ \| '_ \ / _ \/ __|                       |
#   |                      / / (_) | | | |  __/\__ \                       |
#   |                     /___\___/|_| |_|\___||___/                       |
#   |                                                                      |
#   +----------------------------------------------------------------------+
#   |                                                                      |
#   '----------------------------------------------------------------------'

def inventory_kentix_devices_zone(parsed):
    for zoneid, zoneinfo in parsed['zones'].iteritems():
        yield zoneid + " " + zoneinfo['name'], {'armed': zoneinfo['armed']}

def check_kentix_devices_zone(item, params, parsed):
    zoneid = item.split()[0]
    if zoneid in parsed['zones']:
        zoneinfo = parsed['zones'][zoneid]
        state = 0
        text = "armed = %s" % zoneinfo['armed']
        if params['armed'] != zoneinfo['armed']:
            state = 2
            text += ', was %s at discovery' % params['armed']
        return state, text

check_info['kentix_devices.zone'] = {
    'inventory_function'        : inventory_kentix_devices_zone,
    'check_function'            : check_kentix_devices_zone,
    'service_description'       : 'Zone %s',
    'has_perfdata'              : False,
}
