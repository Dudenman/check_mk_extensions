#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-

# (c) 2018 Heinlein Support GmbH
#          Robert Sander <r.sander@heinlein-support.de>

# This is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


def parse_kentix_devices(info):
    parsed = {'multiplier': map(lambda x: savefloat(x[0]), info[0]),
              'sensors': {},
              'zones': {} }
    meta = { 3: 'temp',
             4: 'humidity',
             ## 5: 'dewpoint',
             ## 6: 'co',
             ## 7: 'motion',
             ## 8: 'vibration',
             ## 9: 'latency'
           }
    for line in info[1]:
        parsed['zones'][line[0]] = {'name': line[1], 'armed': line[2]}
    for line in info[2]:
        sid = line[0]
        sensor = { 'info': line }
        sensor['type'] = line[2]
        sensor['zone'] = line[6]
        for key, val in meta.iteritems():
            for subline in info[key]:
                if subline[0] == sid:
                    sensor[val] = subline
        parsed['sensors']["%s %s" % (line[1], sid)] = sensor
    return parsed

def inventory_kentix_devices(parsed, params, stype, sfunc):
    for sensoritem, sensordata in parsed['sensors'].iteritems():
        if sensordata['info'][2] == stype and sfunc in sensordata:
            yield sensoritem, params            

#   .--temperature---------------------------------------------------------.
#   |      _                                      _                        |
#   |     | |_ ___ _ __ ___  _ __   ___ _ __ __ _| |_ _   _ _ __ ___       |
#   |     | __/ _ \ '_ ` _ \| '_ \ / _ \ '__/ _` | __| | | | '__/ _ \      |
#   |     | ||  __/ | | | | | |_) |  __/ | | (_| | |_| |_| | | |  __/      |
#   |      \__\___|_| |_| |_| .__/ \___|_|  \__,_|\__|\__,_|_|  \___|      |
#   |                       |_|                                            |
#   +----------------------------------------------------------------------+
#   |                            main check                                |
#   '----------------------------------------------------------------------'

def check_kentix_devices_temperature(item, params, parsed):
    if item in parsed['sensors']:
        state, text, perfdata = check_temperature(savefloat(parsed['sensors'][item]['temp'][1]) / parsed['multiplier'][0], params, "kentix_devices_%s" % item)
        return state, "%s in zone %s" % (text, parsed['zones'][parsed['sensors'][item]['zone']]['name']), perfdata

check_info['kentix_devices'] = {
    'parse_function'            : parse_kentix_devices,
    'inventory_function'        : lambda parsed: inventory_kentix_devices(parsed, {}, '102', 'temp'),
    'check_function'            : check_kentix_devices_temperature,
    'service_description'       : 'Temperature %s',
    'has_perfdata'              : True,
    'group'                     : 'temperature',
    'snmp_info'                 : [
        ( ".1.3.6.1.4.1.37954.5.1.1", [ "" ] ),
        ( ".1.3.6.1.4.1.37954.5.3.1.1", [ "1",      # zoneIndex
                                          "2",      # zoneName
                                          "3",      # zoneArmedState
                                         ] ),
        ( ".1.3.6.1.4.1.37954.5.2", [ "1.1.1",      # generalIndex
                                      "1.1.2",      # sensorName
                                      "1.1.3",      # sensorType
                                      "1.1.4",      # sensorVersion
                                      "1.1.5",      # sensorAddress
                                      "1.1.6",      # sensorPort
                                      "1.1.7",      # sensorZone
                                      "1.1.8",      # sensorCommunication
                                      "1.1.9",      # sensorBatteryLevel (only used for battery sensors)
                                    ] ),
        ( ".1.3.6.1.4.1.37954.5.2", [ "2.1.1",      # temperatureIndex
                                      "2.1.2",      # tempValue
                                      ## "2.1.3",      # tempAlarm
                                      ## "2.1.4",      # tempMin
                                      ## "2.1.5",      # tempMax
                                    ] ),
        ( ".1.3.6.1.4.1.37954.5.2", [ "3.1.1",      # humidityIndex
                                      "3.1.2",      # humValue
                                      ## "3.1.3",      # humAlarm
                                      ## "3.1.4", 
                                      ## "3.1.5",      # humMax
                                    ] ),
        ## ( ".1.3.6.1.4.1.37954.5.2", [ "4.1.1",      # dewpointIndex
        ##                               "4.1.2",      # dewValue
        ##                               "4.1.3",      # dewAlarm
        ##                               "4.1.4", 
        ##                               "4.1.5",      # dewMax
        ##                             ] ),
        ## ( ".1.3.6.1.4.1.37954.5.2", [ "5.1.1",      # coIndex
        ##                               "5.1.2",      # coValue
        ##                               "5.1.3",      # coAlarm
        ##                               "5.1.4", 
        ##                               "5.1.5",       # coMax
        ## ( ".1.3.6.1.4.1.37954.5.2", [ "6.1.1",      # motionIndex
        ##                               "6.1.2",      # motValue
        ##                               "6.1.3",      # motAlarm
        ##                               "6.1.4", 
        ##                               "6.1.5",      # motMax
        ##                             ] ),
        ## ( ".1.3.6.1.4.1.37954.5.2", [ "7.1.1",      # vibrationIndex
        ##                               "7.1.2",      # vibValue
        ##                               "7.1.3",      # vibAlarm
        ##                               "7.1.4", 
        ##                               "7.1.5",      # vibMax
        ##                             ] ),
        ## ( ".1.3.6.1.4.1.37954.5.2", [ "8.1.1",      # latencyIndex
        ##                               "8.1.2",      # latValue
        ##                               "8.1.3",      # latAlarm
        ##                               "8.1.4", 
        ##                               "8.1.5",      # latMax
        ##                             ] ),
        ],
    'snmp_scan_function'        : lambda oid: 'kentix' in oid(".1.3.6.1.2.1.1.1.0") or oid(".1.3.6.1.4.1.37954.5.1.1.1.0"),
    'includes'                  : [ "temperature.include" ],
}

#.
#   .--humidity------------------------------------------------------------.
#   |              _                     _     _ _ _                       |
#   |             | |__  _   _ _ __ ___ (_) __| (_) |_ _   _               |
#   |             | '_ \| | | | '_ ` _ \| |/ _` | | __| | | |              |
#   |             | | | | |_| | | | | | | | (_| | | |_| |_| |              |
#   |             |_| |_|\__,_|_| |_| |_|_|\__,_|_|\__|\__, |              |
#   |                                                  |___/               |
#   +----------------------------------------------------------------------+


def check_kentix_devices_humidity(item, params, parsed):
    if item in parsed['sensors']:
        state, text, perfdata = check_humidity(savefloat(parsed['sensors'][item]['humidity'][1]) / parsed['multiplier'][1], params)
        return state, "%s in zone %s" % (text, parsed['zones'][parsed['sensors'][item]['zone']]['name']), perfdata

check_info['kentix_devices.humidity'] = {
    'inventory_function'        : lambda parsed: inventory_kentix_devices(parsed, {}, '102', 'humidity'),
    'check_function'            : check_kentix_devices_humidity,
    'service_description'       : 'Humidity %s',
    'has_perfdata'              : True,
    'group'                     : 'humidity',
    'includes'                  : [ "humidity.include" ],
}
