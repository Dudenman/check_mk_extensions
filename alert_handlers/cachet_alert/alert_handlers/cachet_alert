#!/usr/bin/env python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# Cachet Alert Python

debug = False

import cachetclient.cachet as cachet
import json
import os
import sys
from pprint import pprint

def get_api_url(url):
    if not url.endswith('api/v1'):
        if not url.endswith('/'):
            url += '/'
        url += 'api/v1'
    return url

cachet_url = get_api_url(os.environ['PARAMETER_CACHET_URL'])
api_key = os.environ['PARAMETER_API_KEY']
incident_prefix = os.environ.get('PARAMETER_INCIDENT_PREFIX', '[checkmk]')

cachet_notify_subscribers = True
cachet_component_id = os.environ['PARAMETER_COMPONENTID']
cachet_incident_visible = os.environ.get('PARAMETER_INCIDENT_VISIBLE', True)

service_name = os.environ['ALERT_SERVICEDESC']
service_status = os.environ['ALERT_SERVICESTATE']
if os.environ['ALERT_SERVICEATTEMPT'] == os.environ['ALERT_MAXSERVICEATTEMPTS']:
    service_status_type = 'HARD'
else:
    service_status_type = 'SOFT'
service_output = os.environ['ALERT_SERVICEOUTPUT']

CACHET_STATUS_INVESTIGATING = 1
CACHET_STATUS_IDENTIFIED = 2
CACHET_STATUS_WATCHING = 3
CACHET_STATUS_FIXED = 4

CACHET_COMPONENT_STATUS_OPERATIONAL = 1
CACHET_COMPONENT_STATUS_PERFORMANCE_ISSUES = 2
CACHET_COMPONENT_STATUS_PARTIAL_OUTAGE = 3
CACHET_COMPONENT_STATUS_MAJOR_OUTAGE = 4

incident_api = cachet.Incidents(endpoint=cachet_url, api_token=api_key)
component_api = cachet.Components(endpoint=cachet_url, api_token=api_key)

def get_open_incidents():
    incidents = []
    for state in [ CACHET_STATUS_INVESTIGATING, CACHET_STATUS_IDENTIFIED ]:
        try:
            res = json.loads(incident_api.get(component_id=cachet_component_id, status=state))
        except cachet.client.requests.HTTPError, er:
            print er
            sys.exit(2)
        if debug:
            pprint(res)
        incidents.extend(filter(lambda x: not x['is_resolved'] and x['name'].startswith(incident_prefix), res['data']))
    return incidents

def create_incident(incident_status, component_status):
    try:
        res = json.loads(incident_api.post(name="%s %s" % (incident_prefix, service_name),
                                           message=service_output,
                                           status=incident_status,
                                           visible=cachet_incident_visible,
                                           component_id=cachet_component_id,
                                           component_status=component_status,
                                           notify=cachet_notify_subscribers))
    except cachet.client.requests.HTTPError, er:
        print er
        sys.exit(2)
    if debug:
        pprint(res)
    return res['data']

def update_incident(incident, incident_status, component_status):
    try:
        res = json.loads(incident_api.put(id=incident['id'],
                                          status=incident_status,
                                          component_status=component_status))
    except cachet.client.requests.HTTPError, er:
        print er
        sys.exit(2)
    if debug:
        pprint(res)
    try:
        res = json.loads(component_api.put(id=incident['component_id'],
                                           status=component_status))
    except cachet.client.requests.HTTPError, er:
        print er
        sys.exit(2)
    if debug:
        pprint(res)

istat = cstat = False
if service_status == 'WARNING':
    if service_status_type == 'SOFT':
        istat = CACHET_STATUS_INVESTIGATING
        cstat = CACHET_COMPONENT_STATUS_PERFORMANCE_ISSUES
    if service_status_type == 'HARD':
        istat = CACHET_STATUS_IDENTIFIED
        cstat = CACHET_COMPONENT_STATUS_PARTIAL_OUTAGE
if service_status == 'CRITICAL':
    if service_status_type == 'SOFT':
        istat = CACHET_STATUS_INVESTIGATING
        cstat = CACHET_COMPONENT_STATUS_MAJOR_OUTAGE
    if service_status_type == 'HARD':
        istat = CACHET_STATUS_IDENTIFIED
        cstat = CACHET_COMPONENT_STATUS_MAJOR_OUTAGE
if service_status == 'OK':
    istat = CACHET_STATUS_FIXED
    cstat = CACHET_COMPONENT_STATUS_OPERATIONAL

if istat and cstat:
    incidents = get_open_incidents()
    if debug:
        pprint(incidents)
    if not incidents:
        print '%s %s: creating incident' % (service_status, service_status_type)
        incident = create_incident(istat, cstat)
        print '%s %s: created incident %s' % (service_status, service_status_type, incident['id'])
    else:
        for incident in incidents:
            print '%s %s: updating incident %s' % (service_status, service_status_type, incident['id'])
            update_incident(incident, istat, cstat)
            print '%s %s: updated incident %s' % (service_status, service_status_type, incident['id'])
